bool isOperator(char ch) {
    return (ch == '+' || ch == '-' || 
    ch == '*' || ch == '/' || ch == '^');
}
int operatorPrecedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return -1;
}

// 1=> Reverse the infix expression. 
// 2=> Swap every "(" with ")" and vice versa. 
// 3=> Convert the reversed expression to postfix (using the same algorithm as before). 
// 4=> Reverse the postfix expression to get prefix.

string convertToPrefix(string infix) {
    reverse(infix.begin(), infix.end());   // REVERSE KRO PHLE

    for (int i = 0; i < infix.size(); i++) {    // '(' => ')' AND vice-versa
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }

    string postfix = convertInfixToPostfix(infix);    //  convert infix to postfix

    reverse(postfix.begin(), postfix.end());    // reverse the expression

    return postfix;    // return it
}
