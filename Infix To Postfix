#include <stack>
#include <string>
using namespace std;

// Function to return the precedence of operators
int priority(char x) {
    if (x == '(' || x == ')') return 0; // Parentheses have lowest precedence
    if (x == '+' || x == '-') return 1; // Addition & subtraction
    if (x == '*' || x == '/') return 2; // Multiplication & division
    if (x == '^') return 3;             // Exponentiation
    return -1; // Invalid character
}

string infixToPostfix(string s) {
    int n = s.length();
    stack<char> st;    // Stack to hold operators and '('
    string res = "";   // Resultant postfix expression

    for (int i = 0; i < n; i++) {

        // Case 1: If the character is an operand (letter or digit)
        // Directly append it to the result
        if (isalnum(s[i])) {
            res += s[i];
        }

        // Case 2: If the character is '('
        // Push it onto the stack
        else if (s[i] == '(') {
            st.push(s[i]);
        }

        // Case 3: If the character is ')'
        // Pop and append all operators from stack until '(' is found
        else if (s[i] == ')') {
            while (!st.empty() && st.top() != '(') {
                res += st.top();
                st.pop();
            }
            // Remove '(' from stack
            if (!st.empty()) st.pop();
        }

        // Case 4: The character is an operator (+, -, *, /, ^)
        else {
            // Pop operators from the stack with greater or equal precedence
            // This ensures correct order based on precedence
            while (!st.empty() && priority(st.top()) >= priority(s[i])) {
                res += st.top();
                st.pop();
            }
            // Push current operator onto the stack
            st.push(s[i]);
        }
    }

    // Pop any remaining operators from the stack
    while (!st.empty()) {
        res += st.top();
        st.pop();
    }

    return res; // Return the final postfix expression
}
